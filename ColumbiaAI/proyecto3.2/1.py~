import numpy as np
import csv

from numpy import array
from matplotlib import pyplot

import pylab
from mpl_toolkits.mplot3d import Axes3D




csv1 = np.genfromtxt ('input2.csv', delimiter=",")
age = csv1[:,0]
weight = csv1[:,1]
height = csv1[:,2]

number_samples = len(age)

age_np = array(age)
weight_np = array(weight)
height_np = array(height)


mean_age = np.mean(age_np, axis=0)
mean_weight = np.mean(weight_np, axis=0)
mean_height = np.mean(height_np, axis=0)

std_age = np.std(age_np, axis=0)
std_weight = np.std(weight_np, axis=0)
std_height = np.std(height_np, axis=0)

age_norm = []
weight_norm = []
height_norm = []

for weight_1 in weight_np:
	weight_norm.append((weight_1-mean_weight)/std_weight)

for height_1 in height_np:
	height_norm.append((height_1-mean_height)/std_height)

for age_1 in age_np:
	age_norm.append((age_1-mean_age)/std_age)
	

intercept = [1] * number_samples

data_matrix = zip(intercept, age_norm, weight_norm, height_norm)




learning_rates = [0.001, 0.005, 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 0.9763]

learning_rates = [0.9]


def risk_function(data_matrix_in,betas_in):
	
	suma_parcial = 0
	
	for a in range(number_samples):
		
		func = betas_in[0] + betas_in[1]*data_matrix_in[a][1] + betas_in[2]*data_matrix_in[a][2]
		
		squared = (data_matrix_in[a][3]-func)*(data_matrix_in[a][3]-func)
		
		suma_parcial = suma_parcial + squared
		
	return suma_parcial / (2*number_samples)
	
	
	
"""print risk_function(data_matrix,betas)"""


pyplot.ion()



fig = pylab.figure()

ax = Axes3D(fig)

sequence_containing_x_vals = age_np
sequence_containing_y_vals = weight_np
sequence_containing_z_vals = height_np

"sequence_containing_x_vals = age_norm"
"sequence_containing_y_vals = weight_norm"
"sequence_containing_z_vals = height_norm"

ax.scatter(sequence_containing_x_vals, sequence_containing_y_vals, sequence_containing_z_vals)
pyplot.show()
pyplot.pause(10)